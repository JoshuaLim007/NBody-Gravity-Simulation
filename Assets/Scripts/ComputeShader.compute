// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

class starStruct {
	float3 pos;
	float3 vel;
	float mass;
	float forceMag;
};

RWStructuredBuffer<starStruct> starBuffer;
RWStructuredBuffer<uint2> pastPosition;

float3 color;
float3 secondaryColor;
float timeScale;
float radius;
float distanceScaler;
uint lengthOfBuffer;
matrix cameraProjection;
float farPlane;
float nearPlane;

RWTexture2D<float4> Result;
float width;
float height;

float LinearEyeDepth(float rawdepth)
{
	float x, y, z, w;
#if SHADER_API_GLES3 // insted of UNITY_REVERSED_Z
	x = -1.0 + nearPlane / farPlane;
	y = 1;
	z = x / nearPlane;
	w = 1 / nearPlane;
#else
	x = 1.0 - nearPlane / farPlane;
	y = nearPlane / farPlane;
	z = x / nearPlane;
	w = y / nearPlane;
#endif

	return 1.0 / (z * rawdepth + w);
}

void DrawStar(float cx, float cy, float depth, float colorFactor)
{
	int x, y, d;
	float px, nx, py, ny;
	int r = round(radius);

	for (x = 0; x <= r; x++)
	{
		d = (int)ceil(sqrt(r * r - x * x));
		RWTexture2D<float4> temp = Result;
		for (y = 0; y <= d; y++)
		{
			px = cx + x;
			nx = cx - x;
			py = cy + y;
			ny = cy - y;
			float dist = abs( saturate( (r - distance(float3(px, py, 0), float3(cx, cy, 0) ) ) / r ) );
			//
			float a = (1000 / depth) * dist;
			float ltime = saturate(colorFactor * distanceScaler);
			float4 lerpColor = lerp(float4(color.rgb, 1), float4(secondaryColor.rgb, 1), ltime);
			Result[uint2(px, py)] = lerp(temp[uint2(px, py)], lerpColor, saturate(a));
			Result[uint2(nx, py)] = lerp(temp[uint2(nx, py)], lerpColor, saturate(a));
			Result[uint2(px, ny)] = lerp(temp[uint2(px, ny)], lerpColor, saturate(a));
			Result[uint2(nx, ny)] = lerp(temp[uint2(nx, ny)], lerpColor, saturate(a));
			//
		}
	}
}

float MagVector3(float3 vector3) {
	return sqrt(vector3.x * vector3.x + vector3.y * vector3.y + vector3.z * vector3.z);
}

[numthreads(256, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 _force = float3(0.0f, 0.0f, 0.0f);

	if (timeScale == 0) {
		float3 position = starBuffer[id.x].pos;
		float4 viewPosition = mul(cameraProjection, float4(position.x, position.y, position.z, 1)).xyzw;
		float depth = viewPosition.z;
		viewPosition = viewPosition / viewPosition.w * 0.5f;
		uint2 screenPosition = uint2((viewPosition.x * width) + (width / uint(2)), (viewPosition.y * height) + (height / uint(2)));
		float xDelta = (width - screenPosition.x) / width;
		float yDelta = (height - screenPosition.y) / height;
		if (xDelta != 0 && xDelta != 1 && yDelta != 0 && yDelta != 1) {
			DrawStar(screenPosition.x, screenPosition.y, depth, starBuffer[id.x].forceMag);
		}
		return;
	}

	for (uint i = 0; i < lengthOfBuffer; i++)
	{
		if (i == id.x) {
			continue;
		}

		float _distance = distance(starBuffer[i].pos, starBuffer[id.x].pos);

		float3 _direction = starBuffer[i].pos - starBuffer[id.x].pos;

		_direction = normalize(_direction);

		float denom = _distance * _distance * distanceScaler;

		float g = starBuffer[i].mass / denom;

		float3 m_force = _direction * g;

		_force += m_force;
	}

	starBuffer[id.x].vel += _force * timeScale;
	starBuffer[id.x].pos += starBuffer[id.x].vel * timeScale;
	starBuffer[id.x].forceMag = MagVector3(_force);

	float3 position = starBuffer[id.x].pos;
	float4 viewPosition = mul(cameraProjection, float4(position.x, position.y, position.z, 1)).xyzw;
	float depth = viewPosition.z;
	viewPosition = viewPosition / viewPosition.w * 0.5f;
	uint2 screenPosition = uint2((viewPosition.x * width) + (width / uint(2)), (viewPosition.y * height) + (height / uint(2)));
	float xDelta = (width - screenPosition.x) / width;
	float yDelta = (height - screenPosition.y) / height;
	if (xDelta != 0 && xDelta != 1 && yDelta != 0 && yDelta != 1) {
		DrawStar(screenPosition.x, screenPosition.y, depth, starBuffer[id.x].forceMag);
	}
}


